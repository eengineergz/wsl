"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
var Disposable;
(function (Disposable) {
    function create(disposable) {
        if (!disposable)
            return Disposable.empty;
        if (disposable instanceof Function)
            return { dispose: disposable };
        if ("dispose" in disposable)
            return disposable;
        else
            return { dispose: () => dispose(disposable) };
    }
    Disposable.create = create;
    Disposable.empty = { dispose: () => { } };
})(Disposable = exports.Disposable || (exports.Disposable = {}));
function isPromise(obj) {
    return (!!obj &&
        (typeof obj === "object" || typeof obj === "function") &&
        typeof obj.then === "function");
}
function disposeOnReturn(callback) {
    let wasPromise = false;
    const items = [];
    try {
        const result = callback((...args) => items.push(...args));
        if (isPromise(result)) {
            wasPromise = true;
            return (function test() {
                return __awaiter(this, void 0, void 0, function* () {
                    try {
                        return yield result;
                    }
                    finally {
                        dispose(items);
                    }
                });
            })();
        }
        return result;
    }
    finally {
        if (!wasPromise) {
            dispose(items);
        }
    }
}
exports.disposeOnReturn = disposeOnReturn;
function dispose(disposable) {
    if (!disposable)
        return;
    if (Array.isArray(disposable)) {
        for (var d of disposable)
            d.dispose();
    }
    else {
        disposable.dispose();
    }
}
exports.dispose = dispose;
class DisposableComponent {
    constructor() {
        this.disposables = [];
    }
    addDisposable(disposable) {
        this.disposables.push(disposable);
    }
    dispose() {
        dispose(this.disposables);
    }
}
exports.DisposableComponent = DisposableComponent;
//# sourceMappingURL=disposable.js.map